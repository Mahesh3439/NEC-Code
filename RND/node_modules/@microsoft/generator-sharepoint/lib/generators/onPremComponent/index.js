"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const path = require("path");
const BaseGenerator_1 = require("../../common/BaseGenerator");
const Utils = require("../../common/utilities");
const OnPremWebpart = require("../onPremWebpart");
// tslint:disable-next-line:no-any
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
// tslint:disable-next-line:no-any
function defineOptions(generator) {
    generator.option('component-type', {
        description: `The type of component. Currently "webpart" is the only option.`,
        type: String
    });
    OnPremWebpart.defineOptions(generator);
}
exports.defineOptions = defineOptions;
/**
 * This class selects between multiple different types of components for instantiation.
 */
class ComponentSelectorGenerator extends BaseGenerator_1.BaseGenerator {
    constructor() {
        super(...arguments);
        this.friendlyName = 'Component Selection';
    }
    initializing() { }
    prompting() {
        this.ensureCorrectFolder();
        if (!this.shouldExecute()) {
            return Promise.resolve();
        }
        return this.prompt([
            {
                type: 'list',
                name: 'componentType',
                default: 'webpart',
                when: () => !this.config.get('componentType'),
                message: 'Which type of client-side component to create?',
                choices: [
                    {
                        name: 'WebPart',
                        value: 'webpart'
                    }
                ]
            }
        ]).then((answers) => {
            const componentType = answers.componentType || this.config.get('componentType');
            if (componentType === 'webpart') {
                this.config.set('componentType', 'webpart');
            }
            else {
                this.log(colors.red(`Invalid componentType: "${componentType}"`));
            }
        });
    }
    configuring() { }
    writing() { }
    install() { }
    end() { }
    shouldExecute() {
        return this.config.get('environment') === 'onprem';
    }
}
exports.ComponentSelectorGenerator = ComponentSelectorGenerator;
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = ComponentSelectorGenerator;
module.exports.defineOptions = defineOptions;
module.exports.composeWith = composeWith;
//# sourceMappingURL=index.js.map