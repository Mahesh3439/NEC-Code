"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const path = require("path");
const BaseGenerator_1 = require("../../common/BaseGenerator");
const Utils = require("../../common/utilities");
const FieldCustomizer = require("../fieldCustomizer");
const CommandSet = require("../commandSet");
// tslint:disable-next-line:no-any
function defineOptions(generator) {
    FieldCustomizer.defineOptions(generator);
    CommandSet.defineOptions(generator);
    generator.option('extension-type', {
        description: `The type of extension. Currently "ApplicationCustomizer", "FieldCustomizer", or "ListViewCommandSet"`,
        type: String
    });
}
exports.defineOptions = defineOptions;
// tslint:disable-next-line:no-any
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
/**
 * This class selects between multiple different types of extensions for instantiation.
 */
class ExtensionSelectorGenerator extends BaseGenerator_1.BaseGenerator {
    // tslint:disable-next-line:no-any
    constructor(args, options) {
        super(args, options);
        this.friendlyName = 'Extension Selection';
    }
    initializing() { }
    prompting() {
        this.ensureCorrectFolder();
        if (!this.shouldExecute()) {
            return Promise.resolve();
        }
        return this.prompt([
            {
                type: 'list',
                name: 'extensionType',
                default: 'ApplicationCustomizer',
                when: () => !this.config.get('extensionType'),
                message: 'Which type of client-side extension to create?',
                choices: [
                    {
                        name: 'Application Customizer',
                        value: 'ApplicationCustomizer'
                    },
                    {
                        name: 'Field Customizer',
                        value: 'FieldCustomizer'
                    },
                    {
                        name: 'ListView Command Set',
                        value: 'ListViewCommandSet'
                    }
                ]
            }
        ]).then((answers) => {
            const extensionType = answers.extensionType || this.config.get('extensionType');
            this.config.set('extensionType', extensionType);
            if (!(extensionType === 'FieldCustomizer' ||
                extensionType === 'ListViewCommandSet' ||
                extensionType === 'ApplicationCustomizer')) {
                this.log(colors.red(`Invalid extensionType: "${extensionType}"`));
            }
        });
    }
    configuring() { }
    writing() { }
    install() { }
    end() { }
    shouldExecute() {
        return this.config.get('environment') === 'onprem19' &&
            this.config.get('componentType') === 'extension';
    }
}
exports.ExtensionSelectorGenerator = ExtensionSelectorGenerator;
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = ExtensionSelectorGenerator;
module.exports.defineOptions = defineOptions;
module.exports.composeWith = composeWith;
//# sourceMappingURL=index.js.map