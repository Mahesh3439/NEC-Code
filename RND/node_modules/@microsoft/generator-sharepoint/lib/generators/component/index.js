"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const path = require("path");
const BaseGenerator_1 = require("../../common/BaseGenerator");
const Utils = require("../../common/utilities");
const Webpart = require("../webpart");
const Extension = require("../extension");
const Library = require("../library");
// tslint:disable-next-line:no-any
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
// tslint:disable-next-line:no-any
function defineOptions(generator) {
    generator.option('component-type', {
        description: `The type of component. Currently "webpart", "extension", or "library" (beta)`,
        type: String
    });
    Webpart.defineOptions(generator);
    Extension.defineOptions(generator);
    Library.defineOptions(generator);
}
exports.defineOptions = defineOptions;
/**
 * This class selects between multiple different types of components for instantiation.
 */
class ComponentSelectorGenerator extends BaseGenerator_1.BaseGenerator {
    constructor() {
        super(...arguments);
        this.friendlyName = 'Component Selection';
    }
    initializing() { }
    prompting() {
        this.ensureCorrectFolder();
        if (!this.shouldExecute()) {
            return Promise.resolve();
        }
        let choices;
        if (this.config.get('isDomainIsolated')) {
            choices = [
                {
                    name: 'WebPart',
                    value: 'webpart'
                }
            ];
        }
        else {
            choices = [
                {
                    name: 'WebPart',
                    value: 'webpart'
                },
                {
                    name: 'Extension',
                    value: 'extension'
                },
                {
                    name: 'Library',
                    value: 'library'
                }
            ];
        }
        return this.prompt([
            {
                type: 'list',
                name: 'componentType',
                default: 'webpart',
                when: () => !this.config.get('componentType') && !this.config.get('extensionType'),
                message: 'Which type of client-side component to create?',
                choices: choices
            }
        ]).then((answers) => {
            const componentType = answers.componentType || this.config.get('componentType');
            if (componentType === 'webpart') {
                this.config.set('componentType', 'webpart');
            }
            else if (componentType === 'extension') {
                this.config.set('componentType', 'extension');
            }
            else if (componentType === 'library') {
                this.config.set('componentType', 'library');
            }
            else {
                this.log(colors.red(`Invalid componentType: "${componentType}"`));
                if (this.config.get('extensionType')) {
                    this.log(colors.red(`Invalid extensionType: "${this.config.get('extensionType')}"`));
                }
            }
        });
    }
    configuring() { }
    writing() { }
    install() { }
    end() { }
    shouldExecute() {
        return this.config.get('environment') === 'spo';
    }
}
exports.ComponentSelectorGenerator = ComponentSelectorGenerator;
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = ComponentSelectorGenerator;
module.exports.defineOptions = defineOptions;
module.exports.composeWith = composeWith;
//# sourceMappingURL=index.js.map