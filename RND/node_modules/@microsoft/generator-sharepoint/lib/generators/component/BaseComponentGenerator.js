"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const fsx = require("fs-extra");
const Utils = require("../../common/utilities");
const lodash = require("lodash");
const path = require("path");
const YeomanConfiguration_1 = require("../../common/YeomanConfiguration");
const BaseGenerator_1 = require("../../common/BaseGenerator");
// tslint:disable-next-line:no-any
function defineOptions(generator, type) {
    generator.option('component-description', {
        description: `${type} description`,
        type: String
    });
    generator.option('component-name', {
        description: `${type} name`,
        type: String
    });
    generator.option('framework', {
        description: 'Framework to use. Available: "none", "react", "knockout"',
        type: String
    });
    generator.option('plusbeta', {
        description: 'Use the beta packages',
        type: Boolean
    });
}
exports.defineOptions = defineOptions;
class BaseComponentGenerator extends BaseGenerator_1.BaseGenerator {
    prompting() {
        return this.checkSolution().then(() => {
            const availableFrameworks = [
                { name: 'No JavaScript framework', value: 'none' }
            ];
            if (this.allowedFrameworks.indexOf('react') !== -1) {
                availableFrameworks.push({ name: 'React', value: 'react' });
            }
            if (this.allowedFrameworks.indexOf('knockout') !== -1) {
                availableFrameworks.push({ name: 'Knockout', value: 'knockout' });
            }
            return this.prompt([
                {
                    type: 'input',
                    name: 'componentName',
                    default: 'HelloWorld',
                    when: () => !this.config.get('componentName'),
                    message: `What is your ${this.friendlyName} name?`,
                    validate: (input) => {
                        const normalizedNames = normalizeComponentNames(input, this.codeName);
                        const outputFolderPath = this._getOutputFolder(normalizedNames.componentNameCamelCase);
                        if (fsx.existsSync(outputFolderPath)) {
                            console.log(colors.yellow(`\nThe folder "${outputFolderPath}" already exists.`
                                + ` Please choose a different name for your component.`));
                            return false;
                        }
                        // disallow quotes, since this will mess with the JSON we put this string into
                        if (input.indexOf('"') !== -1) {
                            console.log(colors.yellow(`\nDo not use double quotes in your title.`));
                            return false;
                        }
                        return true;
                    }
                    // required: true
                },
                {
                    type: 'input',
                    name: 'componentDescription',
                    when: () => !this.config.get('componentDescription'),
                    message: `What is your ${this.friendlyName} description?`,
                    default: (answers) => `${this.config.get('componentName') || answers.componentName} description`
                    // required: true
                },
                {
                    type: 'list',
                    name: 'framework',
                    when: () => (!this.config.get('framework')) && (availableFrameworks.length !== 1),
                    message: 'Which framework would you like to use?',
                    choices: availableFrameworks
                }
            ]).then((answers) => {
                /* tslint:disable:max-line-length */
                this.context.framework = this.config.get('framework') || answers.framework || 'none';
                this.context.componentDescription = this.config.get('componentDescription') || answers.componentDescription || '';
                this.context.componentId = Utils.generateGuid();
                const normalizedNames = normalizeComponentNames(this.config.get('componentName') || answers.componentName, this.codeName);
                this.context.componentNameUnescaped = normalizedNames.componentNameUnescaped;
                this.context.componentName = normalizedNames.componentName;
                this.context.componentNameCamelCase = normalizedNames.componentNameCamelCase;
                this.context.componentClassName = normalizedNames.componentClassName;
                this.context.componentStrings = normalizedNames.componentStrings;
                this.context.componentClassNameKebabCase = normalizedNames.componentClassNameKebabCase;
                this.context.componentAlias = normalizedNames.componentAlias;
                // the folder where we will drop the information
                const outputFolderPath = this._getOutputFolder(this.context.componentNameCamelCase);
                if (fsx.existsSync(outputFolderPath)) {
                    throw new Error(`The folder "${outputFolderPath}" already exists.`
                        + ` Please choose a different name for your component.`);
                }
            });
        }, () => {
            // Gracefully handle the error
            return Promise.reject(undefined);
        });
    }
    configuring() {
        this.ensureDependencyGroup(this.context.framework);
        if (!this.configJson.data) {
            throw new Error(`Missing required file: "config/config.json"`);
        }
        try {
            /* tslint:disable:max-line-length */
            this.configJson.addEntry({
                components: [{
                        entrypoint: `./lib/${this.folderName}/${this.context.componentNameCamelCase}/${this.context.componentClassName}.js`,
                        manifest: `./src/${this.folderName}/${this.context.componentNameCamelCase}/${this.context.componentClassName}.manifest.json`
                    }]
            }, this.context.componentClassNameKebabCase);
            /* tslint:enable:max-line-length */
        }
        catch (error) {
            // @todo move this error to occur during prompting
            this.log(colors.red(`Cannot create two ${this.friendlyName}s with the same name.`));
            throw error;
        }
        const localizedResourcePath = YeomanConfiguration_1.YeomanConfiguration.environment !== 'onprem' ?
            `lib/${this.folderName}/${this.context.componentNameCamelCase}/loc/{locale}.js` :
            `${this.folderName}/${this.context.componentNameCamelCase}/loc/{locale}.js`;
        this.configJson.addLocalizedResource(this.context.componentStrings, localizedResourcePath);
    }
    writing(shouldWrite = true) {
        super.writing(false);
        if (shouldWrite) {
            const dest = this._getOutputFolder(this.context.componentNameCamelCase);
            this.copyTemplate(path.join(this.sourceRoot(), this.context.framework), dest);
            this.copyTemplate(path.join(this.sourceRoot(), 'base'), dest);
        }
    }
    install() {
        if (!this.tryInstall()) {
            this.log();
            this.log(`Skipping installation of dependencies. You should run "npm install"`);
        }
    }
    _getOutputFolder(componentNameCamelCase) {
        return path.join(this.destinationRoot(), 'src', this.folderName, componentNameCamelCase);
    }
    checkSolution() {
        if (this.config.get('creatingSolution')) {
            return Promise.resolve(undefined);
        }
        // tslint:disable-next-line:no-any
        return Utils.checkSolutionFolder(this, YeomanConfiguration_1.YeomanConfiguration.libraryName)
            .then(solutionName => {
            this.log(`Add new ${this.friendlyName} to solution ${colors.cyan(solutionName)}.`);
        });
    }
}
exports.BaseComponentGenerator = BaseComponentGenerator;
function normalizeComponentNames(componentNameUnescaped, componentType) {
    //  title-case:   Hello, World!     =>  HelloWorld
    const componentName = Utils.titleCase(componentNameUnescaped);
    //  camel-case:   HelloWorld        =>  helloWorld
    const componentNameCamelCase = lodash.camelCase(componentName);
    //  class-name:   HelloWorld        => HelloWorldWebPart
    const componentClassName = componentName + componentType;
    //  strings:      HelloWorldWebPart => HelloWorldWebPartStrings
    const componentStrings = componentClassName + 'Strings';
    //  kebab-case:   HelloWorldWebPart =>  hello-world-web-part
    let componentClassNameKebabCase = lodash.kebabCase(componentClassName);
    const MAX_BUNDLE_NAME_LENGTH = 64;
    if (componentClassNameKebabCase.length > MAX_BUNDLE_NAME_LENGTH) {
        componentClassNameKebabCase = componentClassNameKebabCase.substring(0, MAX_BUNDLE_NAME_LENGTH);
        //  a trailing - will also cause validation to fail
        const lastCharacterIndex = componentClassNameKebabCase.length - 1;
        if (componentClassNameKebabCase[lastCharacterIndex] === '-') {
            componentClassNameKebabCase = componentClassNameKebabCase.substring(0, lastCharacterIndex);
        }
    }
    // alias based off componentNameTitleCase, but truncate if it is too long
    let componentAlias = componentClassName;
    const MAX_ALIAS_LENGTH = 40;
    if (componentAlias.length > MAX_ALIAS_LENGTH) {
        componentAlias = componentAlias.substring(0, MAX_ALIAS_LENGTH);
    }
    return {
        componentNameUnescaped,
        componentName,
        componentNameCamelCase,
        componentClassName,
        componentStrings,
        componentClassNameKebabCase,
        componentAlias
    };
}
exports.normalizeComponentNames = normalizeComponentNames;
//# sourceMappingURL=BaseComponentGenerator.js.map