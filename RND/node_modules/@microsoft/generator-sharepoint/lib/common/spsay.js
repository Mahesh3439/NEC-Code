"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const lodash = require("lodash");
const logo = [
    '      _=+#####!       ',
    '   ###########|       ',
    '   ###/    (##|(@)    ',
    '   ###  ######|   \\   ',
    '   ###/   /###|   (@) ',
    '   #######  ##|   /   ',
    '   ###     /##|(@)    ',
    '   ###########|       ',
    '      **=+####!       '
];
function times(n, character) {
    return lodash.times(n, () => character).join('');
}
function space(n) {
    return times(n, ' ');
}
function getWords(solutionName) {
    const words = [
        'Congratulations!',
        'Solution ' + solutionName + ' is created.',
        'Run gulp serve to play with it!'
    ];
    const colorWords = [
        'Congratulations!',
        'Solution ' + colors.cyan(solutionName) + ' is created.',
        'Run ' + colors.yellow('gulp serve') + ' to play with it!'
    ];
    const maxLength = Math.max.apply(undefined, words.map(word => word.length));
    const formatted = colorWords.map((word, index) => {
        const padding = maxLength - words[index].length;
        const rightPadding = Math.floor(padding / 2);
        const leftPadding = padding - rightPadding;
        return space(leftPadding) + word + space(rightPadding);
    });
    const wrapped = ['']
        .concat(['.' + times(maxLength + 4, '-') + '.'])
        .concat(formatted.map(word => '|  ' + word + '  |'))
        .concat(["'" + times(maxLength + 4, '-') + "'"]);
    return wrapped;
}
function spsay(solutionName) {
    const colorLogo = logo.map(line => colors.cyan(line));
    const words = getWords(solutionName);
    const lines = lodash.zip(colorLogo, words).map(parts => parts.join(''));
    return '\n' + lines.join('\n') + '\n';
}
exports.default = spsay;
//# sourceMappingURL=spsay.js.map