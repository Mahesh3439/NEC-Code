"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const YeomanConfiguration_1 = require("./YeomanConfiguration");
const JsonManager_1 = require("./JsonManager");
class PackageSolutionJsonManager extends JsonManager_1.JsonManager {
    static load(filepath, fs) {
        if (this._instance) {
            throw new Error(`Cannot create a second instance of PackageSolutionJsonManager`);
        }
        let data;
        try {
            data = fs.readJSON(filepath);
        }
        catch (error) {
            data = undefined;
        }
        if (!data) {
            data = {
                '$schema': 'https://developer.microsoft.com/json-schemas/spfx-build/package-solution.schema.json'
            };
        }
        PackageSolutionJsonManager._instance = new PackageSolutionJsonManager(filepath, fs, data);
    }
    static reset() {
        PackageSolutionJsonManager._instance = undefined;
    }
    static get instance() {
        return this._instance;
    }
    getSkipFeatureDeployment() {
        try {
            return this.data.solution.skipFeatureDeployment;
        }
        catch (error) {
            return false;
        }
    }
    setUpSolution(solutionContext) {
        const data = this.data;
        data.solution = {
            name: `${solutionContext.libraryName}-client-side-solution`,
            id: solutionContext.libraryId,
            version: '1.0.0.0'
        };
        if (YeomanConfiguration_1.YeomanConfiguration.environment !== 'onprem') {
            data.solution.includeClientSideAssets = true;
        }
        if (solutionContext.skipFeatureDeployment) {
            data.solution.skipFeatureDeployment = solutionContext.skipFeatureDeployment;
        }
        if (solutionContext.isDomainIsolated !== undefined) {
            data.solution.isDomainIsolated = solutionContext.isDomainIsolated;
        }
        data.paths = {
            zippedPackage: `solution/${solutionContext.libraryName}.sppkg`
        };
    }
    addExtensionFeature(featureId, includeClientSideInstance) {
        const solution = this.data.solution;
        if (!solution) { // This should never happened as the solution has been set up
            return;
        }
        if (!solution.features) {
            solution.features = [];
        }
        let feature;
        const manifests = ['elements.xml'];
        if (includeClientSideInstance) {
            manifests.push('ClientSideInstance.xml');
        }
        feature = {
            title: 'Application Extension - Deployment of custom action.',
            description: 'Deploys a custom action with ClientSideComponentId association',
            id: featureId,
            version: '1.0.0.0',
            assets: {
                elementManifests: manifests
            }
        };
        solution.features.push(feature);
    }
}
exports.PackageSolutionJsonManager = PackageSolutionJsonManager;
//# sourceMappingURL=PackageSolutionJsonManager.js.map